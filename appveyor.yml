version: '{build} (about to be changed)'
image: Visual Studio 2017
environment:
  NUGET_API_KEY:
    secure: eEi8gt5ne+a+N5fYINa2DqF7DCqOzYCE5udL5XzZm2qhcaMJkg9Tg4d0QObF9s3L
init:
  - git config --global core.autocrlf true
dotnet_csproj:
  patch: true
  file: 'src\**\*.csproj'
  version: $(PACKAGE_VERSION)
  package_version: $(PACKAGE_VERSION)
install:
  - choco install gitversion.portable -y -pre
  - git fetch --tags
  - ps: |
      gitversion | Out-Host
      $buildNumber = $env:APPVEYOR_BUILD_NUMBER
      $gitVersion = gitversion | ConvertFrom-JSON
      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }

      $buildVersion = "$($gitVersion.FullSemVer).build.$buildNumber"
      $packageVersion = "$($gitVersion.NuGetVersion).$buildNumber"

      Write-Host "Build number: $buildNumber"
      Write-Host "Git version: $($gitVersion.InformationalVersion)"
      Write-Host "Build version: $buildVersion"
      Write-Host "Package version: $packageVersion"

      Update-AppveyorBuild -Version $buildVersion
      $env:PACKAGE_VERSION = $packageVersion
before_build:
  - dotnet --version
  - dotnet restore src --verbosity m
build_script:
  - dotnet pack src -c Release
artifacts:
  - path: src/**/*.nupkg
deploy:
  - provider: GitHub
    artifact: /src\/.*\.nupkg/
    draft: false
    prerelease: false
    auth_token:
      secure: +hGjnoxWXiKJf2SOZhYHq2NgoU9h7dUSGEe40GtjdinfD82rOvnGmsC/PSdc4AwA
    on:
      appveyor_repo_tag: true
#  - provider: NuGet
#    api_key:
#      secure: eEi8gt5ne+a+N5fYINa2DqF7DCqOzYCE5udL5XzZm2qhcaMJkg9Tg4d0QObF9s3L
#    skip_symbols: false
#    artifact: /src\/.*\.nupkg/
#    on:
#      appveyor_repo_tag: true
deploy_script:
  - appveyor DownloadFile https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
  - ps: |
      
      if ((gitversion /showvariable prereleaselabel) -eq "feat") {
          Write-Host "Version is $(gitversion /showvariable FullSemVer); not pushing to NuGet."
          return;
      }

      $sources = $artifacts.keys | % { $artifacts[$_]['sourcePath'] }
      Write-Host "Found $($sources.Count) artifact sources. They are:"
      Write-Host $sources
  
      $nugets = $sources | ? { ($_ -like '*.nupkg') -and -not ($_ -like '*.symbols.nupkg') }
      Write-Host "Uploading $($nugets.Count) nuget packages"
      $nugets | % { nuget.exe push $_ -Source https://www.nuget.org/api/v2/package -ApiKey $env:NUGET_API_KEY; if ($LastExitCode -ne 0) { throw; } }

#      $symbols = $sources | ? { $_ -like '*.symbols.nupkg' }
#      Write-Host "Uploading $($symbols.Count) symbols packages"
#      $symbols | % { nuget.exe push $_ -Source https://www.nuget.org/api/v2/package -ApiKey $env:NUGET_API_KEY; if ($LastExitCode -ne 0) { throw; } }
